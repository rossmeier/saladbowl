enum PlayerStatus {
    Active # it's the player's turn
    Passive # it's not the player's turn
    Disconnected
}

enum Team {
    Red
    Blue
}

type Player {
    name: string
    team: Team
    id: int
    status: PlayerStatus
    score: int
}

type GameConfig {
    maxWords: int # Maximum number of words a player can submit
    suggestionTime: int # time limit for the suggestion phase in seconds
    rounds: int # Number of rounds to play
}

# client 2 server messages

# Greeting sent by client, containing optional rejoin token
type ClientHello {
    name: string # ignored when a token is given
    token: optional<string>
}

type StartGame void

# Can only be sent during lobby phase
type UpdatePlayerInfo {
    name: optional<string> # when given, change the player's name
    team: optional<Team> # when given, change the player's team
}

# Player has guessed the last word and tells the server to score it
type WordSuccess {
    token: string
}

# Player suggests a word to add to the bowl before the game
type WordSuggestions []{
    word: string
}

type ClientToServer (ClientHello | StartGame | UpdatePlayerInfo | WordSuggestions | WordSuccess)

# server 2 client messages

# New info about the bowl
type BowlUpdate {
    total: int
    current: int
}

type Error {
    message: string
}

# New Game status
enum GameStatus {
    Lobby
    Suggestions
    Playing
}

# The info of the other players has changed
type PlayerList []Player

type ServerHello {
    token: string
    playerID: int
}

# A word drawn from the bowl
type WordNew {
    word: string
    timeLeft: f64
    token: string
}

type ServerToClient (BowlUpdate | Error | GameStatus | PlayerList | ServerHello | WordNew)
