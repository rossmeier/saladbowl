package protocol

// Code generated by go-bare/cmd/gen, DO NOT EDIT.

import (
	"errors"
	"git.sr.ht/~sircmpwn/go-bare"
)

type Player struct {
	Name   string       `bare:"name"`
	Id     int          `bare:"id"`
	Status PlayerStatus `bare:"status"`
	Score  int          `bare:"score"`
}

func (t *Player) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *Player) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type ClientHello struct {
	Name  string  `bare:"name"`
	Token *string `bare:"token"`
}

func (t *ClientHello) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *ClientHello) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type WordSuccess struct {
	Token string `bare:"token"`
}

func (t *WordSuccess) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *WordSuccess) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type WordSuggestion struct {
	Name string `bare:"name"`
}

func (t *WordSuggestion) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *WordSuggestion) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type BowlUpdate struct {
	Total   uint `bare:"total"`
	Current uint `bare:"current"`
}

func (t *BowlUpdate) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *BowlUpdate) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type Error struct {
	Message string `bare:"message"`
}

func (t *Error) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *Error) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type PlayerList []Player

func (t *PlayerList) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *PlayerList) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type ServerHello struct {
	Token string `bare:"token"`
}

func (t *ServerHello) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *ServerHello) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type WordNew struct {
	Word     string  `bare:"word"`
	TimeLeft float64 `bare:"timeLeft"`
	Token    string  `bare:"token"`
}

func (t *WordNew) Decode(data []byte) error {
	return bare.Unmarshal(data, t)
}

func (t *WordNew) Encode() ([]byte, error) {
	return bare.Marshal(t)
}

type PlayerStatus uint

const (
	Active       PlayerStatus = 0
	Passive      PlayerStatus = 1
	Disconnected PlayerStatus = 2
)

func (t PlayerStatus) String() string {
	switch t {
	case Active:
		return "Active"
	case Passive:
		return "Passive"
	case Disconnected:
		return "Disconnected"
	}
	panic(errors.New("Invalid PlayerStatus value"))
}

type GameStatus uint

const (
	YourTurn        GameStatus = 0
	OthersTurn      GameStatus = 1
	SuggestionPhase GameStatus = 2
)

func (t GameStatus) String() string {
	switch t {
	case YourTurn:
		return "YourTurn"
	case OthersTurn:
		return "OthersTurn"
	case SuggestionPhase:
		return "SuggestionPhase"
	}
	panic(errors.New("Invalid GameStatus value"))
}

type ClientToServer interface {
	bare.Union
}

func (_ ClientHello) IsUnion() {}

func (_ WordSuggestion) IsUnion() {}

func (_ WordSuccess) IsUnion() {}

type ServerToClient interface {
	bare.Union
}

func (_ BowlUpdate) IsUnion() {}

func (_ Error) IsUnion() {}

func (_ GameStatus) IsUnion() {}

func (_ PlayerList) IsUnion() {}

func (_ ServerHello) IsUnion() {}

func (_ WordNew) IsUnion() {}

func init() {
	bare.RegisterUnion((*ClientToServer)(nil)).
		Member(*new(ClientHello), 0).
		Member(*new(WordSuggestion), 1).
		Member(*new(WordSuccess), 2)

	bare.RegisterUnion((*ServerToClient)(nil)).
		Member(*new(BowlUpdate), 0).
		Member(*new(Error), 1).
		Member(*new(GameStatus), 2).
		Member(*new(PlayerList), 3).
		Member(*new(ServerHello), 4).
		Member(*new(WordNew), 5)

}
